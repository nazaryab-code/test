const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const MongoClient = require('mongodb').MongoClient;
const cors = require('cors'); 

// MongoDB connection details
const mongoURI = 'mongodb://localhost:27017/bizchat_db';
//const mongoURI = 'mongodb://admin:chAP%7Br%40v!z)%2416@35.158.125.247:27017/?authSource=admin';
const dbName = 'bizchat_db';

// Enable CORS for all routes
app.use(cors());

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '1234');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
const io = require('socket.io')(server, {
  cors: {
    origin: 'http://localhost:3000',
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
  }
});

// MongoDB connection
MongoClient.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true }, (err, client) => {
  if (err) {
    console.error('Error connecting to MongoDB:', err);
    process.exit(1);
  }

  const db = client.db(dbName);
  console.log('Connected to MongoDB');

  // Pass MongoDB database instance to the app
  app.set('mongoDB', db);

  // Initialize Socket.IO
  require('../sockets/index')(io);

  // Define a route to fetch data from MongoDB
  app.get('/api/users', async (req, res) => {
    try {
      const users = await db.collection('users').find({}).toArray();
      res.json(users);
    } catch (error) {
      console.error('Error fetching users:', error);
      res.status(500).send('Internal Server Error');
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Server is Running on: ' + port);
  debug('Listening on ' + bind);
}
